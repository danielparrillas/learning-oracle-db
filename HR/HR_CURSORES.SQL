/*
Implementar un procedimiento que utilice el procedimiento AJUSTE_SALARIAL en base
a los siguientes rangos y actualice toda la tabla:
		Salarios menores a $6000, un aumento del 10%
		Salarios entre $6,000 y $8,000 un aumento del
		Salarios de mas de $8,000 un aumento del 3%
*/



-- Duplicar tabla para el ejemplo

CREATE TABLE employees_copy AS
SELECT * FROM employees;


-- Restaurar el campo SALARY de la tabla employees al estado anterior
MERGE INTO EMPLOYEES E
USING EMPLOYEES_COPY EC
ON (E.EMPLOYEE_ID = EC.EMPLOYEE_ID)
WHEN MATCHED THEN
	UPDATE SET E.SALARY = EC.SALARY;
COMMIT;



-- Ver filas de employee
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES;

----------------------------------------------------------------


-- Probando cursores sin nombre
CREATE OR REPLACE PROCEDURE EJECUTAR_AUMENTO_CURSOR IS
	N_AUMENTO_1 CONSTANT FLOAT := 0.1;
	N_AUMENTO_2 CONSTANT FLOAT := 0.05;
	N_AUMENTO_3 CONSTANT FLOAT := 0.03;
BEGIN
	FOR EMP_ROW IN (SELECT * FROM EMPLOYEES) LOOP
		CASE
			WHEN EMP_ROW.SALARY BETWEEN 6000 AND 8000 THEN
				DBMS_OUTPUT.PUT_LINE('Salario entre $6000 y $8000');
				HR_PROCEDURES.AJUSTE_SALARIAL(
					I_ID => EMP_ROW.EMPLOYEE_ID, I_PORCENTAJE => N_AUMENTO_2);
			WHEN EMP_ROW.SALARY > 8000 THEN
				DBMS_OUTPUT.PUT_LINE('Salario mayor a $8000');
				HR_PROCEDURES.AJUSTE_SALARIAL(
					I_ID => EMP_ROW.EMPLOYEE_ID, I_PORCENTAJE => N_AUMENTO_3);
			ELSE
				DBMS_OUTPUT.PUT_LINE('Salario menor a $6000');
				HR_PROCEDURES.AJUSTE_SALARIAL(
					I_ID => EMP_ROW.EMPLOYEE_ID, I_PORCENTAJE => N_AUMENTO_1);
		END CASE;
	END LOOP;
	COMMIT;
END EJECUTAR_AUMENTO_CURSOR;



----------------------------------------------------------------


-- Probando cursores con FOR
CREATE OR REPLACE PROCEDURE EJECUTAR_AUMENTO_CURSOR IS
	N_AUMENTO_1 CONSTANT FLOAT := 0.1;
	N_AUMENTO_2 CONSTANT FLOAT := 0.05;
	N_AUMENTO_3 CONSTANT FLOAT := 0.03;

	-- Cursor con registros de tabla employee
	CURSOR C_EMPLOYEES IS
	SELECT * FROM EMPLOYEES;

	-- Variable para almacenar row completo
	EMP_ROW C_EMPLOYEES%ROWTYPE;
BEGIN
	FOR EMP_ROW IN C_EMPLOYEES LOOP
		CASE
			WHEN EMP_ROW.SALARY BETWEEN 6000 AND 8000 THEN
				DBMS_OUTPUT.PUT_LINE('Salario entre $6000 y $8000');
				HR_PROCEDURES.AJUSTE_SALARIAL(
					I_ID => EMP_ROW.EMPLOYEE_ID, I_PORCENTAJE => N_AUMENTO_2);
			WHEN EMP_ROW.SALARY > 8000 THEN
				DBMS_OUTPUT.PUT_LINE('Salario mayor a $8000');
				HR_PROCEDURES.AJUSTE_SALARIAL(
					I_ID => EMP_ROW.EMPLOYEE_ID, I_PORCENTAJE => N_AUMENTO_3);
			ELSE
				DBMS_OUTPUT.PUT_LINE('Salario menor a $6000');
				HR_PROCEDURES.AJUSTE_SALARIAL(
					I_ID => EMP_ROW.EMPLOYEE_ID, I_PORCENTAJE => N_AUMENTO_1);
		END CASE;
	END LOOP;
	COMMIT;
END EJECUTAR_AUMENTO_CURSOR;



------------------------------------------------------------------


-- Probando cursores con FETCH
CREATE OR REPLACE PROCEDURE EJECUTAR_AUMENTO_CURSOR IS
	N_AUMENTO_1 CONSTANT FLOAT := 0.1;
	N_AUMENTO_2 CONSTANT FLOAT := 0.05;
	N_AUMENTO_3 CONSTANT FLOAT := 0.03;

	-- Cursor con registros de tabla employee
	CURSOR C_EMPLOYEES IS
	SELECT * FROM EMPLOYEES;

	-- Variable para almacenar row completo
	EMP_ROW C_EMPLOYEES%ROWTYPE;
BEGIN
	OPEN C_EMPLOYEES;

	LOOP
		FETCH C_EMPLOYEES INTO EMP_ROW;

		IF C_EMPLOYEES%NOTFOUND THEN
			CLOSE C_EMPLOYEES;
			EXIT;
		ELSE
			CASE
				WHEN EMP_ROW.SALARY BETWEEN 6000 AND 8000 THEN
					DBMS_OUTPUT.PUT_LINE('Salario entre $6000 y $8000');
					HR_PROCEDURES.AJUSTE_SALARIAL(
						I_ID => EMP_ROW.EMPLOYEE_ID, I_PORCENTAJE => N_AUMENTO_2);
				WHEN EMP_ROW.SALARY > 8000 THEN
					DBMS_OUTPUT.PUT_LINE('Salario mayor a $8000');
					HR_PROCEDURES.AJUSTE_SALARIAL(
						I_ID => EMP_ROW.EMPLOYEE_ID, I_PORCENTAJE => N_AUMENTO_3);
				ELSE
					DBMS_OUTPUT.PUT_LINE('Salario menor a $6000');
					HR_PROCEDURES.AJUSTE_SALARIAL(
						I_ID => EMP_ROW.EMPLOYEE_ID, I_PORCENTAJE => N_AUMENTO_1);
			END CASE;
		END IF;
	END LOOP;
	COMMIT;
END EJECUTAR_AUMENTO_CURSOR;
